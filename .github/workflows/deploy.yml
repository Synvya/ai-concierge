name: ci-cd

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ai-concierge-deploy
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  PROJECT_NAME: ai-concierge
  ECR_REPOSITORY: ai-concierge-backend
  FRONTEND_BUCKET: ${{ secrets.FRONTEND_BUCKET }}
  ANALYTICS_BUCKET: ${{ secrets.ANALYTICS_BUCKET }}

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-asyncio httpx

      - name: Run backend tests
        working-directory: backend
        run: PYTHONPATH=$PWD python -m pytest

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Type check frontend
        working-directory: frontend
        run: npm run typecheck

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build backend image
        id: build_image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd backend
          IMAGE_URI="${REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          echo "Building image: ${IMAGE_URI}"
          docker build -t "${IMAGE_URI}" -t "${REGISTRY}/${ECR_REPOSITORY}:latest" .
          docker push "${IMAGE_URI}"
          docker push "${REGISTRY}/${ECR_REPOSITORY}:latest"
          echo "image_uri=${IMAGE_URI}" >> "$GITHUB_OUTPUT"
          echo "${IMAGE_URI}" > ../image_uri.txt
          echo "Built and pushed: ${IMAGE_URI}"

      - name: Upload image URI
        uses: actions/upload-artifact@v4
        with:
          name: image-uri
          path: image_uri.txt
          retention-days: 1

    outputs:
      image_uri: ${{ steps.build_image.outputs.image_uri }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Download image URI
        uses: actions/download-artifact@v4
        with:
          name: image-uri
        continue-on-error: true

      - name: Resolve image URI
        id: image
        run: |
          IMAGE_URI="${{ needs.build.outputs.image_uri }}"
          if [ -z "$IMAGE_URI" ] && [ -f image_uri.txt ]; then
            echo "Job output empty; falling back to artifact"
            IMAGE_URI=$(cat image_uri.txt)
          fi
          echo "Using image URI: '$IMAGE_URI'"
          if [ -z "$IMAGE_URI" ]; then
            echo "ERROR: image_uri is EMPTY!"
            exit 1
          fi
          echo "image_uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"

      - name: Show backend API URL
        run: echo "Using backend API URL: '$BACKEND_API_URL'"
        env:
          BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}

      - name: Validate backend API URL secret
        run: |
          if [ -z "$BACKEND_API_URL" ]; then
            echo "BACKEND_API_URL secret is not configured."
            exit 1
          fi
        env:
          BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve ECS role ARNs
        id: roles
        run: |
          EXEC_ROLE_ARN=$(aws iam get-role --role-name "${PROJECT_NAME}-ecs-execution" --query 'Role.Arn' --output text)
          TASK_ROLE_ARN=$(aws iam get-role --role-name "${PROJECT_NAME}-ecs-task" --query 'Role.Arn' --output text)
          echo "execution_role=${EXEC_ROLE_ARN}" >> "$GITHUB_OUTPUT"
          echo "task_role=${TASK_ROLE_ARN}" >> "$GITHUB_OUTPUT"

      - name: Ensure ECS cluster and service exist
        run: |
          set -e
          CLUSTER_ARN=$(aws ecs describe-clusters --clusters "${PROJECT_NAME}-cluster" --query 'clusters[0].clusterArn' --output text 2>/dev/null || true)
          if [ -z "$CLUSTER_ARN" ] || [ "$CLUSTER_ARN" = "None" ]; then
            echo "ERROR: ECS cluster '${PROJECT_NAME}-cluster' not found. Provision the infrastructure manually before deploying." >&2
            exit 1
          fi

          SERVICE_STATUS=$(aws ecs describe-services --cluster "${PROJECT_NAME}-cluster" --services "${PROJECT_NAME}-service" --query 'services[0].status' --output text 2>/dev/null || true)
          if [ -z "$SERVICE_STATUS" ] || [ "$SERVICE_STATUS" = "NONE" ] || [ "$SERVICE_STATUS" = "INACTIVE" ]; then
            echo "ERROR: ECS service '${PROJECT_NAME}-service' missing or inactive. Provision it before deploying." >&2
            exit 1
          fi

      - name: Render task definition
        env:
          IMAGE_URI: ${{ needs.build.outputs.image_uri }}
          EXECUTION_ROLE_ARN: ${{ steps.roles.outputs.execution_role }}
          TASK_ROLE_ARN: ${{ steps.roles.outputs.task_role }}
          AWS_REGION: ${{ env.AWS_REGION }}
          BACKEND_ENV_JSON: ${{ secrets.BACKEND_ENV_JSON }}
          BACKEND_SECRET_JSON: ${{ secrets.BACKEND_SECRET_JSON }}
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
        run: |
          python scripts/render_task_definition.py \
            --family "${PROJECT_NAME}-backend" \
            --image "${{ steps.image.outputs.image_uri }}" \
            --cpu "512" \
            --memory "1024" \
            --execution-role "${EXECUTION_ROLE_ARN}" \
            --task-role "${TASK_ROLE_ARN}" \
            --log-group "/ecs/${PROJECT_NAME}-backend" \
            --log-region "${AWS_REGION}" \
            --environment-json env:BACKEND_ENV_JSON \
            --secret-json env:BACKEND_SECRET_JSON \
            --output taskdef.json

      - name: Register task definition
        id: register
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition=${TASK_DEF_ARN}" >> "$GITHUB_OUTPUT"
          echo "Registered task definition: ${TASK_DEF_ARN}"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster "${PROJECT_NAME}-cluster" \
            --service "${PROJECT_NAME}-service" \
            --task-definition "${{ steps.register.outputs.task_definition }}" \
            --force-new-deployment
          aws ecs wait services-stable --cluster "${PROJECT_NAME}-cluster" --services "${PROJECT_NAME}-service"

      - name: Build frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install
        working-directory: frontend
      - name: Build frontend bundle
        run: npm run build
        working-directory: frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.BACKEND_API_URL }}
      - name: Verify bundle references API URL
        working-directory: frontend
        env:
          BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        run: |
          if ! grep -R "${BACKEND_API_URL}" dist; then
            echo "Expected backend API URL not found in build output"
            exit 1
          fi

      - name: Upload frontend to S3
        run: aws s3 sync frontend/dist s3://${FRONTEND_BUCKET} --delete
