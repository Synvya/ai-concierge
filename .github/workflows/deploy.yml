name: ci-cd

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ai-concierge-deploy
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  PROJECT_NAME: ai-concierge
  ECR_REPOSITORY: ai-concierge-backend
  FRONTEND_BUCKET: ${{ secrets.FRONTEND_BUCKET }}
  ANALYTICS_BUCKET: ${{ secrets.ANALYTICS_BUCKET }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  TF_STATE_KEY: ai-concierge/terraform.tfstate

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-asyncio httpx

      - name: Run backend tests
        working-directory: backend
        run: PYTHONPATH=$PWD python -m pytest

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Type check frontend
        working-directory: frontend
        run: npm run typecheck

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build backend image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd backend
          IMAGE_URI="${REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          echo "Building image: ${IMAGE_URI}"
          docker build -t "${IMAGE_URI}" -t "${REGISTRY}/${ECR_REPOSITORY}:latest" .
          docker push "${IMAGE_URI}"
          docker push "${REGISTRY}/${ECR_REPOSITORY}:latest"
          echo "Built and pushed: ${IMAGE_URI}"
          echo "${IMAGE_URI}" > ../image_uri.txt

      - name: Upload image URI
        uses: actions/upload-artifact@v4
        with:
          name: image-uri
          path: image_uri.txt
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Download image URI
        uses: actions/download-artifact@v4
        with:
          name: image-uri

      - name: Set image URI variable
        id: image
        run: |
          IMAGE_URI=$(cat image_uri.txt)
          echo "Loaded image URI: ${IMAGE_URI}"
          echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install
        working-directory: frontend
      - run: npm run build
        working-directory: frontend

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: infra/terraform
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}"

      - name: Terraform Apply
        id: apply
        working-directory: infra/terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_backend_image: ${{ steps.image.outputs.image_uri }}
          TF_VAR_analytics_bucket_name: ${{ env.ANALYTICS_BUCKET }}
          TF_VAR_frontend_bucket_name: ${{ env.FRONTEND_BUCKET }}
          TF_VAR_tf_state_bucket_name: ${{ env.TF_STATE_BUCKET }}
          TF_VAR_environment_variables: ${{ secrets.BACKEND_ENV_JSON }}
          TF_VAR_secret_variables: ${{ secrets.BACKEND_SECRET_JSON }}
        run: terraform apply -auto-approve
        continue-on-error: true

      - name: Retry on task definition error
        if: steps.apply.outcome == 'failure'
        working-directory: infra/terraform
        shell: bash
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_backend_image: ${{ steps.image.outputs.image_uri }}
          TF_VAR_analytics_bucket_name: ${{ env.ANALYTICS_BUCKET }}
          TF_VAR_frontend_bucket_name: ${{ env.FRONTEND_BUCKET }}
          TF_VAR_tf_state_bucket_name: ${{ env.TF_STATE_BUCKET }}
          TF_VAR_environment_variables: ${{ secrets.BACKEND_ENV_JSON }}
          TF_VAR_secret_variables: ${{ secrets.BACKEND_SECRET_JSON }}
        run: |
          echo "Apply failed - ECS task definition eventual consistency issue"
          
          for i in 1 2 3; do
            echo "Retry attempt $i/3..."
            terraform state rm aws_ecs_task_definition.backend 2>/dev/null || true
            terraform state rm aws_ecs_service.backend 2>/dev/null || true
            
            echo "Waiting 30 seconds for AWS eventual consistency..."
            sleep 30
            
            if terraform apply -auto-approve; then
              echo "Success on retry $i"
              exit 0
            fi
            
            echo "Retry $i failed"
          done
          
          echo "All retries exhausted"
          exit 1

      - name: Upload frontend to S3
        run: aws s3 sync frontend/dist s3://${FRONTEND_BUCKET} --delete
