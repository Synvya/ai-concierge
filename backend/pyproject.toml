[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-concierge-backend"
version = "0.1.0"
description = "FastAPI service for the AI concierge"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
readme = "README.md"
dependencies = [
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.28.0",
    "sqlalchemy>=2.0.27",
    "asyncpg>=0.29.0",
    "pgvector>=0.2.4",
    "psycopg[binary,pool]>=3.1.18",
    "openai>=1.14.0",
    "pydantic>=2.6.0",
    "pydantic-settings>=2.2.1",
    "python-dotenv>=1.0.1",
    "boto3>=1.34.34",
    "tenacity>=8.2.3",
    "httpx>=0.26.0",
    "structlog>=23.2.0",
    "greenlet>=3.0.3"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.4",
    "httpx[cli]>=0.26.0",
    "ruff>=0.1.13",
    "mypy>=1.8.0"
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "SIM", "PL"]
ignore = [
    "E501",      # Line too long (handled by formatter)
    "B008",      # Function call in argument defaults (FastAPI Depends pattern)
    "PLR2004",   # Magic value comparisons (acceptable in tests and implementation)
    "PLR0912",   # Too many branches (complexity - will refactor later)
    "PLR0913",   # Too many arguments (complexity - will refactor later)
    "PLR0915",   # Too many statements (complexity - will refactor later)
    "PLC0415",   # Import outside toplevel (lazy imports for optional deps)
    "SIM103",    # Needless bool compare (preference)
    "SIM105",    # Use contextlib.suppress (preference)
    "SIM108",    # Use ternary (preference)
    "PLW0603",   # Global statement (used intentionally)
]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
check_untyped_defs = false
strict_optional = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
